{"version":3,"sources":["Components/Squares.js","Components/Steps.js","Components/CalcWinner.js","App.js","serviceWorker.js","index.js"],"names":["Squares","props","squares","lastMove","length","i","push","className","key","onClick","style","color","mark","Steps","steps","history","map","step","onJump","CalcWinner","winners","a","b","c","App","state","isNextX","handleClick","bind","handleStart","handleJump","index","this","slice","setState","concat","splice","status","current","win","draw","indexOf","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0cdaaec2.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction Squares(props) {\n  let squares = [];\n  const lastMove = props.lastMove[props.lastMove.length-1]\n  for(let i=0; i<9; i++) {\n    squares.push(\n      <li \n        className='square'\n        key={i}\n        onClick={() => props.onClick(i)}\n        style ={lastMove === i ? {color: 'blue'} : {color: 'black'}}\n      >{props.mark[i]}\n      </li>) \n  }\n  \n  return (\n    <ul className='board'>\n      {squares}\n    </ul>\n  );\n}\n\nexport default Squares;\n\n\n","import React from 'react';\n\n\nfunction Steps(props) {\n  const steps = props.history.map((step, i) => {\n  \treturn(\n      <button \n  \t\t  key={i}\n  \t\t  onClick={() => props.onJump(i)}\n  \t\t>\n  \t\t  Go to move#{i}\n  \t\t</button>\n  \t)\n  });\n\n  \n  return (\n    <div className='move'>\n      {steps}\n    </div>\n  );\n}\n\nexport default Steps;\n","function CalcWinner(squares) {\n  \n  const winners = [\n    [0, 1, 2], [3, 4, 5], [6, 7, 8],\n    [0, 3, 6], [1, 4, 7], [2, 5, 8],\n    [0, 4, 8], [2, 4, 6]\n  ];\n  \n  for(let i=0; i < winners.length; i++) {\n    const [ a, b, c ] = winners[i];\n    if(squares[a] && squares[a] === squares[b] \n       && squares[a] === squares[c]) {\n      return squares[a]; \n  }}\n  return null;\n}\n\nexport default CalcWinner;\n","import React, { Component }   from 'react';\nimport Squares from './Components/Squares';\nimport Steps from './Components/Steps';\nimport CalcWinner from './Components/CalcWinner';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        history: [  \n        {         \n          squares: [\n            null, null, null,\n            null, null, null,\n            null, null, null\n          ]\n        }\n      ],\n      isNextX: true,\n      lastMove: []\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleStart = this.handleStart.bind(this);\n    this.handleJump = this.handleJump.bind(this);\n  }\n\n  handleClick(i) {\n    const index = i;\n    const history = this.state.history\n    const current = history[history.length-1]; \n    const squares = current.squares.slice(); \n    if(CalcWinner(squares)) { return null };\n    if(squares[index]) { return null };\n    squares[index] = this.state.isNextX ? 'X': 'O';\n    const lastMove = this.state.lastMove.slice(); \n    this.setState({\n      history: history.concat([{ squares: squares }]),\n      isNextX: !this.state.isNextX,\n      lastMove: lastMove.concat(index)\n    });    \n  }\n\n  handleJump(i) {\n    const index = i;\n    const history = this.state.history.splice(0, index+1);\n    const lastMove = this.state.lastMove.splice(0, index);\n    this.setState({\n      history: history,\n      isNextX: index % 2 === 0 ? true: false,\n      lastMove: lastMove\n    })\n  }\n\n  handleStart() {\n    this.setState({\n      history: [\n        {\n          squares: [\n            null, null, null,\n            null, null, null,\n            null, null, null\n          ]\n        }\n      ],\n      isNextX: true,\n      lastMove: []\n    })\n  }\n\n  render() {\n    const { history, isNextX, lastMove } = this.state;\n    const current = history[history.length-1].squares;\n    const win = CalcWinner(current);\n    const draw = current.indexOf(null);\n    console.log(lastMove);\n    let status;\n    if(win) {\n      status = <h5>The winner is {win}</h5>\n    } else if(draw === -1) {\n      status = <h5>It is a draw. Try again!</h5>\n    } else {\n      status = <h5>The next move is {isNextX ? 'X': 'O'}</h5>\n    }\n    \n    return (\n       <div>\n         <h1>Play tic-tac-toe</h1>\n         <div className='container'>\n              {status}\n              <Squares\n                mark={current} \n                onClick={this.handleClick}\n                lastMove={lastMove} \n              />\n              <button className='start' onClick={this.handleStart} >Start Again</button>\n              <Steps \n                history={history}\n                onJump={this.handleJump} \n              />\n          </div>\n      </div>  \n    );  \n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}